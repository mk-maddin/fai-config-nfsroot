#! /bin/bash

# mk-basefile, create basefiles for some distributions
#
# Thomas Lange, Uni Koeln, 2011-2024
# based on the Makefile implementation of Michael Goetze
##--edited by mk.maddin: 2022-12-31
#
# Usage example: mk-basefile -J STRETCH64
# This will create a STRETCH64.tar.xz basefile.

# Supported distributions (each i386/amd64):
# Debian GNU/Linux
# Ubuntu 14.04/16.04/20.04/22.04
# AlmaLinux 9
# Rocky Linux 8/9
# CentOS 5/6/7/8
# Scientific Linux Cern 5/6
#
# Packages you might want to install to use this command:
# debootstrap, rinse, xz-utils


# Define your local mirros here
# For the first stage, set the CentOS/SLC mirror in /etc/rinse/rinse.conf
MIRROR_DEBIAN=http://deb.debian.org/debian/
MIRROR_UBUNTU=http://mirror.netcologne.de/ubuntu/
MIRROR_CENTOS=http://mirror.netcologne.de/
MIRROR_KALI="http://http.kali.org/kali/"
MIRROR_RASPBIAN="http://mirrordirector.raspbian.org/raspbian/"
MIRROR_DEEPIN="https://community-packages.deepin.com/deepin/"

# Keyrings are required for cross distribution building of basefiles
KEYRING_DEBIAN="debian-archive-keyring.gpg"
KEYRING_DEBIAN_URL="${MIRROR_DEBIAN}pool/main/d/debian-archive-keyring/"
KEYRING_UBUNTU="ubuntu-archive-keyring.gpg"
KEYRING_UBUNTU_URL="${MIRROR_UBUNTU}pool/main/u/ubuntu-keyring/"
KEYRING_KALI="kali-archive-keyring.gpg"
KEYRING_KALI_URL="${MIRROR_KALI}pool/main/k/kali-archive-keyring"
KEYRING_RASPBIAN="raspbian-archive-keyring.gpg"
KEYRING_RASPBIAN_URL="${MIRROR_RASPBIAN}pool/main/r/raspbian-archive-keyring/"
#KEYRING_DEEPIN="deepin-archive-uranus-keyring.gpg"
KEYRING_DEEPIN="uos-archive-keyring.gpg"
KEYRING_DEEPIN_URL="${MIRROR_DEEPIN}pool/main/d/deepin-keyring"

EXCLUDE_SQUEEZE=isc-dhcp-client,isc-dhcp-common,info
EXCLUDE_WHEEZY=info
EXCLUDE_JESSIE=info
EXCLUDE_STRETCH=info
EXCLUDE_BUSTER=
EXCLUDE_BULLSEYE=
EXCLUDE_BOOKWORM=
EXCLUDE_TRIXIE=
EXCLUDE_FORKY=
EXCLUDE_SID=
EXCLUDE_DEBIAN=

EXCLUDE_TRUSTY=dhcp3-client,dhcp3-common,info
EXCLUDE_XENIAL=udhcpc,dibbler-client,info
EXCLUDE_BIONIC=udhcpc,dibbler-client,info
EXCLUDE_FOCAL=udhcpc,dibbler-client,info
EXCLUDE_JAMMY=udhcpc,dibbler-client,info
EXCLUDE_NOBLE=udhcpc,dibbler-client,inf
EXCLUDE_UBUNTU=

# here you can add packages, that are needed very early
INCLUDE_DEBIAN=netcat-netcat-openbsd,usbutils,apt-transport-https
INCLUDE_JAMMY=
INCLUDE_UBUNTU=
INCLUDE_KALI=netcat-openbsd,usbutils,apt-transport-https
INCLUDE_RASPBIAN=
INCLUDE_DEEPIN="${INCLUDE_DEBIAN},ca-certificates"


setarch() {

    l32=
    if [ X$1 = Xi386 ]; then
        l32=linux32
    fi
}

check() {

    if [ $(id -u) != 0 ]; then
        echo "You must be root to create chroots."
        exit 1
    fi
    mknod $xtmp/test-dev-null c 1 3
    if [ $? -eq 1 ]; then
        echo "Cannot create device files on $xtmp, aborting."
        echo "Perhaps this directory is mounted with option nodev."
        rm -rf $xtmp
        exit 1
    fi
    echo test > $xtmp/test-dev-null
    if [ $? -eq 1 ]; then
        echo "Cannot create device files on $xtmp, aborting."
        echo "Perhaps this directory is mounted with option nodev."
        rm -rf $xtmp
        exit 1
    fi
    rm -f $xtmp/test-dev-null
}


mkpost-centos() {

    # set local mirror for rinse post script
    [ -z "$MIRROR_CENTOS" ] && return
    cat <<EOM > $xtmp/post
#! /bin/sh
mkdir -p $xtmp/etc/yum.repos.d/orig
cp -p $xtmp/etc/yum.repos.d/*.repo $xtmp/etc/yum.repos.d/orig
perl -pi -e 's,mirrorlist=,#mirrorlist=,; s,#baseurl=http://mirror.centos.org,baseurl=$MIRROR_CENTOS,;' $xtmp/etc/yum.repos.d/CentOS-Base.repo
EOM
    chmod 555 $xtmp/post
}


mkpost-slc() {

    # set local mirror for rinse post script
    ver=$1
    [ -z "$MIRROR_SLC" ] && return
    cat <<EOM > $xtmp/post
#! /bin/sh
mkdir -p $xtmp/etc/yum.repos.d/orig
cp -p $xtmp/etc/yum.repos.d/*.repo $xtmp/etc/yum.repos.d/orig
perl -pi -e 's,baseurl=http://linuxsoft.cern.ch,baseurl=$MIRROR_SLC,;' $xtmp/etc/yum.repos.d/slc$ver-os.repo
perl -pi -e 's,baseurl=http://linuxsoft.cern.ch,baseurl=$MIRROR_SLC,;' $xtmp/etc/yum.repos.d/slc$ver-updates.repo

EOM
    chmod 555 $xtmp/post
}


cleanup-deb() {

    chroot $xtmp apt-get clean
    rm -f $xtmp/etc/hostname $xtmp/etc/resolv.conf \
          $xtmp/var/lib/apt/lists/*_* $xtmp/usr/bin/qemu-*-static \
          $xtmp/etc/udev/rules.d/70-persistent-net.rules \
	  $xtmp/var/lib/dbus/machine-id
    > $xtmp/etc/machine-id
}


cleanup-rinse() {

    # check if chroot works
    echo "Installed packages in chroot:"
    chroot $xtmp rpm -qa|sort
    echo -n "CHROOT rpm -qa: "
    chroot $xtmp rpm -qa|wc -l

    rm -f $xtmp/etc/resolv.conf $xtmp/post
    if [ -d $xtmp/etc/yum.repos.d/orig ]; then
        mv $xtmp/etc/yum.repos.d/orig/* $xtmp/etc/yum.repos.d/
        rm -rf $xtmp/etc/yum.repos.d/orig
    fi
}


tarit() {

    tar $attributes --numeric-owner --one-file-system -C $xtmp -cf - . | $zip > $target.$ext
}


rpmdist() {

    local arch=$1
    local vers=$2
    local dist=$3
    local domain=$(domainname)

    check
    setarch $arch
    $l32 rinse --directory $xtmp --distribution $dist-$vers --arch $arch --before-post-install $xtmp/post
    domainname $domain # workaround for #613377
    cleanup-rinse
    tarit
}


alma() {
    rpmdist $1 $2 alma
}

rocky() {
    rpmdist $1 $2 rocky
}


centos() {

    local arch=$1
    local vers=$2
    local domain=$(domainname)

    check
    setarch $arch
    mkpost-centos
    $l32 rinse --directory $xtmp --distribution centos-$vers --arch $arch --before-post-install $xtmp/post
    domainname $domain # workaround for #613377
    cleanup-rinse
    tarit
}


slc() {

    local arch=$1
    local vers=$2

    check
    setarch $arch
    mkpost-slc $vers
    $l32 rinse --directory $xtmp --distribution slc-$vers --arch $arch --before-post-install $xtmp/post
    cleanup-rinse
    tarit
}

debgetkeyring() {

    local keyring_name=$1
    shift
    local keyring_url=$1

    local deblist=""
    local keyrings_path='/usr/share/keyrings/'
    if [ ! -f "${keyrings_path}/${keyring_name}" ];then
        local keyring_pkgs=$(wget -q -O - "${keyring_url}" | grep ".*-keyring_.*_all.deb" | sed 's#\(^.*href="\)\([^"]\+.deb\)\(".*$\)#\2#g' | sed 's#\(^.*-keyring_\).*$#\1#g' | sort -u)
        for deb in ${keyring_pkgs[@]};do
            deb_url="${keyring_url}/"$(wget -q -O - "${keyring_url}" | grep ".*${deb}.*_all.deb" | sed 's#\(^.*href="\)\([^"]\+.deb\)\(".*$\)#\2#g' | sort | tail -n1) &&
            wget -q "${deb_url}" && apt-get -qq install -y "./$(basename ${deb_url})" && deblist="${deblist} ${deb%_}"
            if [ -f "./$(basename ${deb_url})" ];then rm -f "./$(basename ${deb_url})";fi
        done
    fi
    echo "${deblist}"
}

debgeneric() {

    local DIST=$1
    shift
    local mirror=$1
    shift
    local arch=$1
    shift
    local keyring_url=$1
    shift
    local keyring_name=$1

    dist=${DIST%%[0-9][0-9]}
    local exc="EXCLUDE_$dist"
    [ -n "${!exc}" ] && exc="--exclude=${!exc}" || unset exc
    local inc="INCLUDE_$dist"
    [ -n "${!inc}" ] && inc="--include=${!inc}" || unset inc
    dist=${dist,,}

    if [ -z "${exc}" ];then
        if [ "$mirror" == "${MIRROR_DEBIAN}" ] && [ -n "$EXCLUDE_DEBIAN" ];then 
            local exc="--exclude=$EXCLUDE_DEBIAN"
        elif [ "$mirror" == "${MIRROR_UBUNTU}" ] && [ -n "$EXCLUDE_UBUNTU" ];then 
            local exc="--exclude=$EXCLUDE_UBUNTU"
        elif [ "$mirror" == "${MIRROR_RASPBIAN}" ] && [ -n "$EXCLUDE_RASPBIAN" ];then 
            local exc="--exclude=$EXCLUDE_RASPBIAN";fi
    fi

    if [ -z "${inc}" ];then
        if [ "$mirror" == "${MIRROR_DEBIAN}" ] && [ -n "$INCLUDE_DEBIAN" ];then 
            local inc="--include=$INCLUDE_DEBIAN"
        elif [ "$mirror" == "${MIRROR_UBUNTU}" ] && [ -n "$INCLUDE_UBUNTU" ];then 
            local inc="--include=$INCLUDE_UBUNTU"
        elif [ "$mirror" == "${MIRROR_RASPBIAN}" ] && [ -n "$INCLUDE_RASPBIAN" ];then 
            local inc="--include=$INCLUDE_RASPBIAN";fi
    fi

    check
    
    local debscript_d="/usr/share/debootstrap/scripts";local dist_ref='gutsy'
    if [[ "${DIST}" =~ ^KALI ]];then
    	local dist="kali-rolling"
    elif [[ "${DIST}" =~ ^DEEPIN ]];then
	    local dist="apricot";local dist_ref='sid'
    fi
    if [ ! -f "${debscript_d}/${dist}" ];then ln -rs "${debscript_d}/${dist_ref}" "${debscript_d}/${dist}";fi

    local keyring_inst=""
    if [ -z "${keyring_name}" ] && [ -n "${keyring_url}" ];then
        local keyring_name="${dist}-archive-keyring.gpg";fi
    if [ -n "${keyring_name}" ] && [ -n "${keyring_url}" ];then
        local keyring_inst=$( debgetkeyring "${keyring_name}" "${keyring_url}");fi

    if [ -n "$arch" ]; then
    echo "EXECUTE: qemu-debootstrap --arch $arch ${exc} $inc $dist $xtmp $mirror"
	qemu-debootstrap --arch $arch ${exc} $inc $dist $xtmp $mirror
	target="${target}_${arch^^}"
    else
	if [[ $DIST =~ 64 ]]; then
            arch=amd64
	else
            arch=i386
	fi
    echo "EXECUTE: debootstrap --arch $arch ${exc} $inc $dist $xtmp $mirror"
	debootstrap --arch $arch ${exc} $inc $dist $xtmp $mirror
    fi

    if [ -n "${keyring_inst}" ];then 
        apt-get -qq purge -y "${keyring_inst}"
        if [ -f "${keyring_inst}" ];then rm -f "${keyring_inst}";fi
    fi
    cleanup-deb
    tarit
}

prtdists() {

    echo "Available:

    ROCKY8_64
    ROCKY9_64
    CENTOS5_32   CENTOS5_64
    CENTOS6_32   CENTOS6_64
    CENTOS7_32   CENTOS7_64
                 CENTOS8_64
    SLC5_32      SLC5_64
    SLC6_32      SLC6_64
                 SLC7_64
    TRUSTY32     TRUSTY64
    XENIAL32     XENIAL64
                 BIONIC64
                 FOCAL64
                 JAMMY64
    SQUEEZE32    SQUEEZE64
    WHEEZY32     WHEEZY64
    JESSIE32     JESSIE64
    STRETCH32    STRETCH64
    BUSTER32     BUSTER64
    BULLSEYE32   BULLSEYE64
    BOOKWORM32   BOOKWORM64
    TRIXIE32     TRIXIE64
    FORKY32      FORKY64
    SID32        SID64
    KALI32       KALI64
    DEEPIN32     DEEPIN64               
                              PI_WHEEZY
                              PI_JESSIE
                              PI_STRETCH
                              PI_BUSTER
"
}

usage() {

    cat <<EOF
mk-basefile, create minimal base files for a Linux distritubtion

   Copyright (C) 2011-2024 by Thomas Lange
   forked by mk.maddin

Usage: mk-basefile [OPTION] ... DISTRIBUTION

   -s                   Show list of supported linux distributions
   -f ARCH              Build for foreign architecture ARCH.
   -d DIR               Use DIR for creating the temporary subtree structure.
   -z                   Use zstd for compressing the tar file.
   -J                   Use xz for compressing the tar file.
   -k                   Keep the temporary subtree structure, do not remove it.
   -h                   Print help.

 Usage example: mk-basefile -J STRETCH64
 This will create a STRETCH64.tar.xz basefile.

EOF
    exit 0
}

# main routine

ext=tar
zip=cat
attributes=
cleanup=1
attributes="--xattrs --selinux --acls"

while getopts ashzJd:kf: opt ; do
    case "$opt" in
        a) echo "$0: Warning. -a is ignored, because xtattrs, acls and selinux are always added." ;;
        d) export TMPDIR=$OPTARG ;;
        f) export ARCH=$OPTARG ;;
        z) zip="zstd -9"; ext=tar.zst ;;
        J) zip="xz -8" ext=tar.xz ;;
        k) cleanup=0 ;;
        h) usage ;;
        s) prtdists ; exit 0;;
        ?) exit 3 ;; # error in option parsing
    esac
done
shift $((OPTIND - 1))

xtmp=$(mktemp --tmpdir -d basefiles.XXXXXXXX)
if [ $? -eq 1 ]; then
    echo "mktemp failed. Aborting."
    exit 2
fi
chmod 755 $xtmp

target=$1 # also the name of the output file

[ -z "$target" ] && usage
case "$target" in
    CENTOS5_32) centos i386 5 ;;
    CENTOS5_64) centos amd64 5 ;;
    CENTOS6_32) centos i386 6 ;;
    CENTOS6_64) centos amd64 6 ;;
    CENTOS7_32) centos i386 7 ;;
    CENTOS7_64) centos amd64 7 ;;
    CENTOS8_64) centos amd64 8 ;;
    ROCKY8_64) rocky amd64 8 ;;
    ROCKY9_64) rocky amd64 9 ;;
    ALMA9_64) alma amd64 9 ;;
    SLC5_32) slc i386 5 ;;
    SLC5_64) slc amd64 5 ;;
    SLC6_32) slc i386 6 ;;
    SLC6_64) slc amd64 6 ;;
    SLC7_64) slc amd64 7 ;;
    TRUSTY*|XENIAL*|BIONIC*|FOCAL*|JAMMY*|NOBLE)
        debgeneric $target $MIRROR_UBUNTU "$ARCH" "${KEYRING_UBUNTU_URL}" "${KEYRING_UBUNTU}";;
    SQUEEZE*|WHEEZY*|JESSIE*|STRETCH*|BUSTER*|BULLSEYE*|BOOKWORM*|TRIXIE*|FORKY*|SID*)
        debgeneric $target $MIRROR_DEBIAN "$ARCH" "${KEYRING_DEBIAN_URL}" "${KEYRING_DEBIAN}";;
    KALI*)
        debgeneric $target $MIRROR_KALI "$ARCH" "${KEYRING_KALI_URL}" "${KEYRING_KALI}";;
    DEEPIN*)
        debgeneric $target $MIRROR_DEEPIN "$ARCH" "${KEYRING_DEEPIN_URL}" "${KEYRING_DEEPIN}";;
    PI_WHEEZY|PI_JESSIE|PI_STRETCH|PI_BUSTER|PI_BULLSEYE)
        export ARCH=armhf
	    debgeneric $target $MIRROR_RASPBIAN "$ARCH" "${KEYRING_RASPBIAN_URL}" "${KEYRING_RASPBIAN}";;
    *) echo "Unknown distribution. Aborting."
       prtdists
       exit 99 ;;
esac

# cleanup
if [ $cleanup -eq 1 ]; then
   rm -rf $xtmp
fi
